
class Solution {
    private int find(int[] parent,int node){
        if(parent[node] != node){
            parent[node] = find(parent,parent[node]);
        }
        return parent[node];
    }
    
    
    private boolean union(int[] parent,int[] rank ,int u,int v){
        int pu=find(parent,u);
        int pv=find(parent,v);
        
        if(pu == pv) return false;
        
        if(rank[pu]<rank[pv]){
            parent[pu] = pv;
        }else if (rank[pv] < rank[pu]){
            parent[pv] =pu;
        }else{
            parent[pv] = pu;
            rank[pu]++;
        }
        return true;
    }
    
    
    
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        int[] parent = new int[V];
        int[] rank = new int[V];
        
        for(int i =0;i<V;i++){
            parent[i]=i;
            rank[i]=0;
        }
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            
            if(!union(parent,rank,u,v)){
                return true;
            }
        }
        return false;
    }
}
